name: Test Gemini Integration

on:
  workflow_dispatch:  # 手動実行専用

jobs:
  test-gemini:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test Gemini API
        run: |
          echo "Testing Gemini API integration..."
          
          # テストメッセージ
          TEST_MESSAGE="テストメッセージ：バグ修正が必要です"
          
          # Gemini APIを呼び出し
          RESPONSE=$(curl -s -X POST \
            -H "x-goog-api-key: ${{ secrets.GEMINI_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "contents": [{
                "parts": [{
                  "text": "以下のSlackメッセージをGitHub Issue用のタイトルと本文に整形してください。必ず以下のJSON形式で返答してください：\n\n{\n  \"title\": \"明確で具体的なタイトル\",\n  \"body\": \"構造化された説明\",\n  \"should_create_issue\": true/false\n}\n\n雑談や質問の場合はshould_create_issueをfalseにしてください。\n\nSlackメッセージ: '"$TEST_MESSAGE"'"
                }]
              }]
            }' \
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent")
          
          echo "Gemini API Response:"
          echo "$RESPONSE" | jq '.'
          
          # レスポンスを解析
          GEMINI_TEXT=$(echo "$RESPONSE" | jq -r '.candidates[0].content.parts[0].text')
          echo "Parsed response: $GEMINI_TEXT"

      - name: Create Test Issue
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "テスト: Gemini統合",
              body: "これはGemini API統合のテストIssueです。\n\n@claude",
              labels: ['test', 'from-slack']
            });
            
            console.log(`Created test issue #${issue.data.number}: ${issue.data.html_url}`);